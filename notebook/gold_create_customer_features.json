{
	"name": "gold_create_customer_features",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "insmlsparkdev",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false
		},
		"metadata": {
			"language_info": {
				"name": "python"
			}
		},
		"cells": [
			{
				"cell_type": "markdown",
				"source": [
					"# Gold Layer: Create Customer Dimension Features\n",
					"Azure Synapse Analytics - Medallion Architecture\n",
					"\n",
					"Pattern: Enriched customer features for ML workflows"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\n",
					"from pyspark.sql.functions import col, count, sum as spark_sum, avg, when, current_timestamp\n",
					"import logging"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Configuration - ADLS Gen2 paths\n",
					"STORAGE_ACCOUNT = \"insmlstdevyx4ce6\"\n",
					"TABLES_ROOT = f\"abfss://tables@{STORAGE_ACCOUNT}.dfs.core.windows.net\"\n",
					"\n",
					"SILVER_CUSTOMERS_PATH = f\"{TABLES_ROOT}/silver/silver_customers\"\n",
					"SILVER_POLICIES_PATH = f\"{TABLES_ROOT}/silver/silver_policies\"\n",
					"GOLD_FEATURES_PATH = f\"{TABLES_ROOT}/gold/gold_customer_features\"\n",
					"\n",
					"logging.basicConfig(level=logging.INFO)\n",
					"logger = logging.getLogger(__name__)"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"def main():\n",
					"    spark = SparkSession.builder.getOrCreate()\n",
					"\n",
					"    try:\n",
					"        logger.info(\"Reading customers and policies from Silver\")\n",
					"        df_customers = spark.read.format(\"delta\").load(SILVER_CUSTOMERS_PATH)\n",
					"        df_policies = spark.read.format(\"delta\").load(SILVER_POLICIES_PATH)\n",
					"\n",
					"        logger.info(f\"Read {df_customers.count()} customers and {df_policies.count()} policies\")\n",
					"\n",
					"        # Aggregate policy features per customer\n",
					"        policy_agg = df_policies.groupBy(\"customer_id\").agg(\n",
					"            count(\"policy_id\").alias(\"total_policies\"),\n",
					"            spark_sum(when(col(\"status\") == \"ACTIVE\", 1).otherwise(0)).alias(\"active_policies\"),\n",
					"            avg(\"premium\").alias(\"avg_premium\"),\n",
					"            spark_sum(\"premium\").alias(\"total_premium\")\n",
					"        )\n",
					"\n",
					"        # Join with customer base\n",
					"        customer_features = df_customers.join(policy_agg, on=\"customer_id\", how=\"left\") \\\n",
					"            .fillna(0, subset=[\"total_policies\", \"active_policies\", \"avg_premium\", \"total_premium\"]) \\\n",
					"            .withColumn(\"feature_timestamp\", current_timestamp())\n",
					"\n",
					"        feature_count = customer_features.count()\n",
					"        logger.info(f\"Created features for {feature_count} customers\")\n",
					"\n",
					"        # Write to Gold\n",
					"        logger.info(f\"Writing to {GOLD_FEATURES_PATH}\")\n",
					"        customer_features.write \\\n",
					"            .format(\"delta\") \\\n",
					"            .mode(\"overwrite\") \\\n",
					"            .option(\"description\", \"Gold layer: Customer dimension features for ML\") \\\n",
					"            .save(GOLD_FEATURES_PATH)\n",
					"\n",
					"        logger.info(\"✓ Customer features creation completed\")\n",
					"\n",
					"    except Exception as e:\n",
					"        logger.error(f\"✗ Failed to create customer features: {str(e)}\")\n",
					"        raise"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"main()"
				]
			}
		]
	}
}